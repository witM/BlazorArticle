
@using BlazorArticle

@typeparam TId



@inject IParserArticle Parser

@* @((MarkupString)Content) *@ 

@if(_renderFragments is not null)
{
    @foreach (var fragment in _renderFragments)
    {
        switch (fragment)
        {
            case HtmlFragment html:
                @((MarkupString)html.Html)
                break;

            case ComponentFragment component:
                <DynamicComponent Type="component.type" Parameters="component.parameters" />
                break;
        }
    }
}


@code{

    /// <summary>
    /// Provides content to be parsed by the BlazorArticle library. Model has to inherit from IArticle interface.
    /// </summary>
    [Parameter]
    public IArticle<TId> IContent { get; set; }
    /// <summary>
    /// Specifies whether CSS comments and white spaces are removed from the final rendered result. (Default: false).
    /// </summary>
    [Parameter]
    public bool RemoveComments { get; set; } = false;

    List<ArticleFragment> _renderFragments { get; set; }


    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnParametersSetAsync()
    {
        _renderFragments = Parser.Parse(IContent.Content, RemoveComments);
    }

}